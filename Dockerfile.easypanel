# Multi-stage build for Easypanel optimization
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache libc6-compat python3 make g++

# Copy package files
COPY package*.json ./

# Install dependencies with optimization flags
RUN npm cache clean --force && \
    rm -f package-lock.json && \
    npm ci --legacy-peer-deps --no-fund --no-audit --production=false

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build environment for maximum speed
ENV NODE_ENV=production
ENV VITE_BUILD_FAST=true
ENV DISABLE_ESLINT_PLUGIN=true
ENV CI=true

# Build with fast script and fallback
RUN npm run build || npm run build:regular

# Production stage
FROM base AS runner
WORKDIR /app

# Create system user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./

# Install only production dependencies
RUN npm ci --legacy-peer-deps --only=production --no-fund --no-audit && \
    npm cache clean --force

# Create upload directories
RUN mkdir -p public/uploads/logos public/uploads/products && \
    chown -R nextjs:nodejs public/uploads

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start application
CMD ["npm", "start"]
