# =============================================================================
# Chinelos Store - Docker Compose Configuration
# For Easy Panel, local development, and self-hosting
# =============================================================================

version: "3.8"

services:
  # =============================================================================
  # Application Service
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chinelos-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000

      # Database connection (MySQL format)
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${DB_USER:-chinelos_user}
      DB_PASSWORD: ${DB_PASSWORD:?Database password is required}
      DB_NAME: ${DB_NAME:-chinelos_store}

      # Alternative MySQL format (legacy support)
      MYSQL_HOST: db
      MYSQL_PORT: 3306
      MYSQL_USER: ${DB_USER:-chinelos_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:?Database password is required}
      MYSQL_DATABASE: ${DB_NAME:-chinelos_store}

      # Optional configurations
      DB_CONNECTION_LIMIT: ${DB_CONNECTION_LIMIT:-10}
      APP_NAME: ${APP_NAME:-Chinelos Store}
      APP_VERSION: ${APP_VERSION:-1.0.0}

    depends_on:
      db:
        condition: service_healthy

    volumes:
      # Persistent upload storage
      - upload_data:/app/public/uploads
      - upload_server_data:/app/server/public/uploads

    networks:
      - chinelos-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chinelos.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.chinelos.loadbalancer.server.port=3000"

  # =============================================================================
  # Database Service
  # =============================================================================
  db:
    image: mysql:8.0
    container_name: chinelos-db
    restart: unless-stopped
    ports:
      - "${DB_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:?Database root password is required}
      MYSQL_DATABASE: ${DB_NAME:-chinelos_store}
      MYSQL_USER: ${DB_USER:-chinelos_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:?Database password is required}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci

    volumes:
      # Persistent database storage
      - db_data:/var/lib/mysql

      # Custom MySQL configuration
      - ./mysql.conf:/etc/mysql/conf.d/custom.cnf:ro

    networks:
      - chinelos-network

    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO

    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_ROOT_PASSWORD}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Optional: Redis for caching (uncomment if needed)
  # =============================================================================
  # redis:
  #   image: redis:7-alpine
  #   container_name: chinelos-redis
  #   restart: unless-stopped
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - chinelos-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3

  # =============================================================================
  # Optional: Nginx reverse proxy (uncomment if needed)
  # =============================================================================
  # nginx:
  #   image: nginx:alpine
  #   container_name: chinelos-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - chinelos-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DB_DATA_PATH:-./data/mysql}

  upload_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${UPLOAD_PATH:-./data/uploads}

  upload_server_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${UPLOAD_SERVER_PATH:-./data/server-uploads}

  # redis_data:
  #   driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  chinelos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
