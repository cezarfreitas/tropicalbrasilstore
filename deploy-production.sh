#!/bin/bash

# Script de Deploy para Produ√ß√£o
set -e

# Configura√ß√µes
REGISTRY=${DOCKER_REGISTRY:-""}
IMAGE_NAME="chinelos-api"
REMOTE_HOST=${REMOTE_HOST:-""}
REMOTE_USER=${REMOTE_USER:-"root"}
APP_PATH=${APP_PATH:-"/opt/chinelos-store"}

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"; }
warn() { echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è${NC} $1"; }
error() { echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå${NC} $1"; }

echo "üöÄ Deploy para Produ√ß√£o - API produto/variantes"
echo "=============================================="

# 1. Verificar configura√ß√µes
log "Verificando configura√ß√µes..."

if [ -z "$REMOTE_HOST" ]; then
    error "REMOTE_HOST n√£o configurado. Use: export REMOTE_HOST=seu-servidor.com"
    exit 1
fi

if [ -z "$REGISTRY" ]; then
    warn "REGISTRY n√£o configurado. Usando registry local."
fi

# 2. Build da imagem
log "Executando build..."
if [ -f "build-production.sh" ]; then
    chmod +x build-production.sh
    ./build-production.sh
else
    error "Script build-production.sh n√£o encontrado!"
    exit 1
fi

# 3. Tag para registry (se configurado)
if [ -n "$REGISTRY" ]; then
    log "Fazendo tag para registry..."
    REMOTE_TAG="$REGISTRY/$IMAGE_NAME:latest"
    docker tag "$IMAGE_NAME:latest" "$REMOTE_TAG"
    
    log "Fazendo push para registry..."
    docker push "$REMOTE_TAG"
else
    log "Salvando imagem para transfer..."
    docker save "$IMAGE_NAME:latest" > chinelos-api.tar
fi

# 4. Deploy no servidor remoto
log "Conectando ao servidor $REMOTE_HOST..."

if [ -n "$REGISTRY" ]; then
    # Deploy com registry
    ssh $REMOTE_USER@$REMOTE_HOST << EOF
        set -e
        cd $APP_PATH || (echo "Criando diret√≥rio $APP_PATH..." && mkdir -p $APP_PATH && cd $APP_PATH)
        
        echo "üì• Baixando nova imagem..."
        docker pull $REMOTE_TAG
        docker tag $REMOTE_TAG $IMAGE_NAME:latest
        
        echo "üîÑ Parando servi√ßos antigos..."
        docker-compose -f docker-compose.prod.yml down || true
        
        echo "üöÄ Iniciando novos servi√ßos..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "‚è≥ Aguardando servi√ßos..."
        sleep 30
        
        echo "üè• Verificando health check..."
        if curl -f http://localhost:80/health; then
            echo "‚úÖ Deploy realizado com sucesso!"
        else
            echo "‚ùå Health check falhou"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
        fi
EOF
else
    # Deploy transferindo arquivo
    log "Transferindo imagem Docker..."
    scp chinelos-api.tar docker-compose.prod.yml $REMOTE_USER@$REMOTE_HOST:$APP_PATH/
    
    ssh $REMOTE_USER@$REMOTE_HOST << EOF
        set -e
        cd $APP_PATH
        
        echo "üì• Carregando nova imagem..."
        docker load < chinelos-api.tar
        
        echo "üîÑ Parando servi√ßos antigos..."
        docker-compose -f docker-compose.prod.yml down || true
        
        echo "üöÄ Iniciando novos servi√ßos..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "‚è≥ Aguardando servi√ßos..."
        sleep 30
        
        echo "üè• Verificando health check..."
        if curl -f http://localhost:80/health; then
            echo "‚úÖ Deploy realizado com sucesso!"
        else
            echo "‚ùå Health check falhou"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
        fi
        
        echo "üßπ Limpando arquivo tempor√°rio..."
        rm -f chinelos-api.tar
EOF
    
    # Limpar arquivo local
    rm -f chinelos-api.tar
fi

# 5. Testar API
log "Testando API produto/variantes..."
sleep 5

TEST_URL="http://$REMOTE_HOST/api/products/bulk"
if curl -f "$TEST_URL" > /dev/null 2>&1; then
    log "‚úÖ API est√° respondendo"
else
    warn "‚ö†Ô∏è API pode n√£o estar acess√≠vel externamente"
fi

echo ""
echo "üéâ Deploy conclu√≠do!"
echo "===================="
echo "üåê URL: http://$REMOTE_HOST"
echo "üîó API: http://$REMOTE_HOST/api/products/bulk"
echo "üè• Health: http://$REMOTE_HOST/health"
echo ""
echo "üìã Comandos √∫teis:"
echo "Ver logs: ssh $REMOTE_USER@$REMOTE_HOST 'cd $APP_PATH && docker-compose -f docker-compose.prod.yml logs -f'"
echo "Restart: ssh $REMOTE_USER@$REMOTE_HOST 'cd $APP_PATH && docker-compose -f docker-compose.prod.yml restart'"
echo "Status: ssh $REMOTE_USER@$REMOTE_HOST 'cd $APP_PATH && docker-compose -f docker-compose.prod.yml ps'"
