#!/bin/bash

# Chinelos Store - Universal Deploy Script
echo "üöÄ Iniciando deploy da Chinelos Store..."

# Detect deployment method
if [ -f "docker-compose.yml" ] && [ "$1" = "docker" ]; then
    echo "üì¶ Usando m√©todo Docker Compose..."
    
    # Verificar se docker e docker-compose est√£o instalados
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o encontrado. Instale o Docker primeiro."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n√£o encontrado. Instale o Docker Compose primeiro."
        exit 1
    fi

    # Criar arquivo .env se n√£o existir
    if [ ! -f .env ]; then
        echo "üìù Criando arquivo .env..."
        cp .env.example .env
        echo "‚ö†Ô∏è  Configure as vari√°veis de ambiente no arquivo .env"
    fi

    # Build e start dos containers
    echo "üî® Fazendo build da aplica√ß√£o..."
    docker-compose build --no-cache

    echo "üöÄ Iniciando containers..."
    docker-compose up -d

    # Verificar se os containers est√£o rodando
    echo "üîç Verificando status dos containers..."
    docker-compose ps

    echo "‚úÖ Deploy conclu√≠do!"
    echo ""
    echo "üì± Aplica√ß√£o dispon√≠vel em: http://localhost:3000"
    echo "üóÑÔ∏è  Banco de dados dispon√≠vel em: localhost:3306"
    echo ""
    echo "üìã Para ver os logs:"
    echo "   docker-compose logs -f app"
    echo ""
    echo "üõë Para parar a aplica√ß√£o:"
    echo "   docker-compose down"
    echo ""
    echo "üîÑ Para reiniciar:"
    echo "   docker-compose restart"

else
    echo "‚òÅÔ∏è  Usando m√©todo Nixpacks (Railway, Render, Fly.io)..."

    # Check if we're in the right directory
    if [ ! -f "package.json" ]; then
        echo "‚ùå package.json not found. Are you in the project root?"
        exit 1
    fi

    # Check if nixpacks.toml exists
    if [ ! -f "nixpacks.toml" ]; then
        echo "‚ùå nixpacks.toml not found. Please create it first."
        exit 1
    fi

    echo "‚úÖ Found required files"

    # Install dependencies if node_modules doesn't exist
    if [ ! -d "node_modules" ]; then
        echo "üì¶ Installing dependencies..."
        npm ci
    fi

    # Run type checking
    echo "üîç Running type check..."
    npm run typecheck
    if [ $? -ne 0 ]; then
        echo "‚ùå Type check failed. Please fix type errors before deploying."
        exit 1
    fi

    echo "‚úÖ Type check passed"

    # Run tests if they exist
    if npm list vitest > /dev/null 2>&1; then
        echo "üß™ Running tests..."
        npm test
        if [ $? -ne 0 ]; then
            echo "‚ùå Tests failed. Please fix failing tests before deploying."
            exit 1
        fi
        echo "‚úÖ Tests passed"
    fi

    # Build the application locally to verify
    echo "üî® Building application..."
    npm run build
    if [ $? -ne 0 ]; then
        echo "‚ùå Build failed. Please fix build errors before deploying."
        exit 1
    fi

    echo "‚úÖ Build successful"

    # Clean up build artifacts (they will be rebuilt during deployment)
    rm -rf dist

    echo "üéâ Deployment preparation complete!"
    echo ""
    echo "Your project is ready for Nixpacks deployment."
    echo ""
    echo "Environment variables needed for production:"
    echo "  - DATABASE_URL or individual MYSQL_* variables"
    echo "  - PORT (optional, defaults to 3000)"
    echo "  - NODE_ENV=production"
    echo ""
    echo "Deploy with your preferred platform that supports Nixpacks:"
    echo "  - Railway: railway up"
    echo "  - Render: git push"
    echo "  - Fly.io: fly deploy"
    echo "  - Any Nixpacks-compatible platform"
    echo ""
    echo "For Docker Compose deployment, run:"
    echo "  ./deploy.sh docker"
fi
