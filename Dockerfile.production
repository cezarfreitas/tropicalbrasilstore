# Multi-stage Dockerfile para produção otimizada
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependências de build
RUN apk add --no-cache \
    curl \
    bash \
    git

# Copiar arquivos de dependências
COPY package*.json ./
COPY tsconfig.json ./

# Instalar todas as dependências (incluindo devDependencies para build)
RUN npm ci --legacy-peer-deps

# Copiar código fonte
COPY . .

# Build do projeto para produção
RUN npm run build

# Compilar TypeScript do servidor
RUN npx tsc -p server/tsconfig.json

# Copiar arquivos estáticos necessários
RUN mkdir -p dist/public && \
    if [ -d "public/uploads" ]; then cp -r public/uploads dist/public/; fi

# Stage de produção
FROM node:22-alpine AS production

WORKDIR /app

# Instalar apenas curl para health checks
RUN apk add --no-cache curl

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copiar apenas package.json e package-lock.json
COPY package*.json ./

# Instalar apenas dependências de produção
RUN npm ci --only=production --legacy-peer-deps && \
    npm cache clean --force

# Copiar build da stage anterior
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/public ./public

# Criar diretórios de upload com permissões corretas
RUN mkdir -p public/uploads/logos public/uploads/products && \
    chown -R nodejs:nodejs public/uploads

# Mudar para usuário não-root
USER nodejs

# Configurar variáveis de ambiente
ENV NODE_ENV=production
ENV PORT=80

# Expor porta
EXPOSE 80

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Comando de inicialização
CMD ["node", "dist/server/index.js"]
